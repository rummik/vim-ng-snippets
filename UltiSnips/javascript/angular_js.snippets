snippet ngmod "angular module" b
angular.module('${1:name}', [$2])${0:;}
endsnippet

snippet "var ngmod" "angular module with variable assignment" b
var $1 = angular.module('${1:name}', [$2]);
$0
endsnippet

snippet .ngconf "angular config" i
.config(${1/.+/[/}${1/([^,\s]+)(\s*),?\s?/'$1'$2, /g}function($1) {
	$2
}${1/.+/]/})${0:;}
endsnippet

snippet .ngconst "angular constant" i
.constant('${1:name}', ${2:value})${0:;}
endsnippet

snippet .ngc "angular controller" i
.controller('${1:name}', ${2/.+/[/}${2/([^,\s]+)(\s*),?\s?/'$1'$2, /g}function($2) {
	$3
}${2/.+/]/})${0:;}
endsnippet

snippet .ngd "angular directive" i
.directive('${1:name}', ${2/.+/[/}${2/([^,\s]+)(\s*),?\s?/'$1'$2, /g}function($2) {
	return {
		restrict: '${3:E}',
		controller: '${4:MyController}',
		link: function(scope, element${5:, attrs${6:, ctrl}}) {
			$7
		}
	};
}${2/.+/]/})${0:;}
endsnippet

snippet .ngf "angular factory" i
.factory('${1:name}', ${2/.+/[/}${2/([^,\s]+)(\s*),?\s?/'$1'$2, /g}function($2) {
	$3
}${2/.+/]/})${0:;}
endsnippet

snippet .ngs "angular service" i
.service('${1:name}', ${2/.+/[/}${2/([^,\s]+)(\s*),?\s?/'$1'$2, /g}function($2) {
	$3
}${2/.+/]/})${0:;}
endsnippet

snippet .ngfi "angular filter" i
.filter('${1:filterName}', ${2/.+/[/}${2/([^,\s]+)(\s*),?\s?/'$1'$2, /g}function($2) {
	return function(input, ${3:args}) {
		$4
	};
}${2/.+/]/})${0:;}
endsnippet

snippet .ngval "angular value" i
.value('${1:name}', ${2:value})${0:;}
endsnippet


# Snippets for helper functions
snippet ngfor "angular.foreach loop" b
angular.forEach(${1:iterable}, function(value, key) {
	$2
});
$0
endsnippet

snippet ngext "extend an object" i
angular.extend(${1:dst}, ${2:src})$0
endsnippet

snippet ngeql "compare objects" i
angular.equals(${1:o1}, ${2:o2})$0
endsnippet

snippet ngisa "value is an array" i
angular.isArray(${1:value})$0
endsnippet

snippet ngisd "value is a date" i
angular.isDate(${1:value})$0
endsnippet

snippet ngisdef "value is defined" i
angular.isDefined(${1:value})$0
endsnippet

snippet ngise "value is an element" i
angular.isElement(${1:value})$0
endsnippet

snippet ngisf "value is a function" i
angular.isFunction(${1:value})$0
endsnippet

snippet ngisn "value is a number" i
angular.isNumber(${1:value})$0
endsnippet

snippet ngiso "value is an object" i
angular.isObject(${1:value})$0
endsnippet

snippet ngiss "value is a string" i
angular.isString(${1:value})$0
endsnippet

snippet ngisu "value is undefined" i
angular.isUndefined(${1:value})$0
endsnippet


# Snippets for unit tests
snippet ngit "it (js, inject)" b
it('${1:description}', inject(function($2) {
	$3
}));
endsnippet

snippet ngbf "before each (js, inject)" b
beforeEach(inject(function($1) {
	$3
}));
endsnippet


# Route related snippets
snippet $route "angular $routeProvider with .when condition" b
$routeProvider
	.when('${1:url}', {
		templateUrl: '${2:templateUrl}',
		controller: '${3:controller}'${5:,
		resolve: {
			$4
		}}
	})${0:;}
endsnippet

snippet .ngwhen "angular route .when" i
.when('${1:url}', {
	templateUrl: '${2:templateUrl}',
	controller: '${3:controller}'${5:,
	resolve: {
		$4
	}}
})${0:;}
endsnippet

snippet ".ngot(h(e(r(w(i(se?)?)?)?)?)?)?" "angular route .otherwise" ir
.otherwise({
	redirectTo: '${1:url}'
})${0:;}
endsnippet


# Scope related snippets
snippet $f "$scope'd function"
$scope.${1:name} = function(${2:args}) {
	$3
};$0
endsnippet

snippet $v "$scope'd variable"
$scope.${1:name} = ${2:value};$0
endsnippet

snippet $va "$scope'd variable assigned to an argument with the same name"
$scope.${1:variable} = $1;$0
endsnippet

snippet $w "$scope.$watch"
$scope.$watch('${1:name}', function(newValue, oldValue) {
	$2
});$0
endsnippet

snippet $on "$scope.$on"
$scope.$on('${1:eventName}', function(event${2/.+/, /}$2) {
	$3
});$0
endsnippet

snippet $b "$scope.$broadcast"
$scope.$broadcast('${1:eventName}', ${2:eventArgs});$0
endsnippet

snippet $e "$scope.$emit"
$scope.$emit('${1:eventName}', ${2:eventArgs});$0
endsnippet


# Directive related snippets
snippet ngcomp "A compile function"
function(tElement, tAttrs, transclude) {
	return function (scope, element, attrs) {
		$0
	}
}
endsnippet

snippet nglink "directive link function"
function link(scope, element${1:, attrs}${2:, ctrl}) {
	$0
}
endsnippet


# vim:ft=snippets:
